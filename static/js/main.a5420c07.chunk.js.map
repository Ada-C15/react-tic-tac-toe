{"version":3,"sources":["components/Square.js","components/Board.js","TicTacToeComputeWinner.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","e","onClickCallback","id","value","Board","squares","squareList","oneDSquares","sqrow","sqcol","push","generateSquareComponents","console","log","squareItems","map","sq","x","o","getWinner","matrix","winner","rowCounts","colCounts","rowIndex","length","colIndex","incrementCount","getWinningRowCol","getWinningDiag","rcCounts","rcIndex","revDiag","counts","n","index","entry","TicTacToeComputeWinner","PLAYER_1","generateSquares","currentId","row","col","App","useState","setSquares","player","setPlayer","statusMessage","setStatusMessage","setWinner","checkForWinner","rowNum","Math","floor","colNum","currentSquare","nextPlayer","computedWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5420c07.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  //console.log('Square class: value', props.value);\n  //console.log('Square class: id', props.id);\n  //console.log('Square class: onClickCallback', props.onClickCallback);\n\n  return <button className=\"square\" onClick={(e) => props.onClickCallback(props.id, e)}>\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but you need to return a 1D array of square components\n  let oneDSquares = [];\n\n  for (const sqrow of squares){\n    //console.log('sq-row:', sqrow);\n    for (const sqcol of sqrow){\n      //console.log('sq-col:', sqcol);\n      oneDSquares.push(sqcol);\n    }\n  }\n  //console.log('1d squares:', oneDSquares);\n\n  return oneDSquares;\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  \n  //console.log('squares:', squares);\n  \n  //squares = SAMPLE_BOARD;\n\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log('1-d square list', squareList);\n  \n  const squareItems = squareList.map((sq) => {\n    //console.log('sq-value:', sq.value);\n    //console.log('sq-id:', sq.id);\n\n    return (\n       <Square id={sq.id} value={sq.value} onClickCallback={onClickCallback}></Square>\n     );\n    });\n\n\n  return <div className=\"grid\" >\n    {squareItems}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","// This file implements the logic to compute the winner for a tic tac matrix of size N x N (n rows and n columns)\n// The code is fully generalized to handle any value of N and does not hard code based on a fixed value of N\n\nconst x = 'x';\nconst o = 'o';\nconst e = '';\n\n  const TicTacToeComputeWinner = (matrix) => {\n\n    //console.log(`TicTacToeWinner called`);\n\n    let winner = getWinner(matrix);\n    return winner;\n  };\n  \n  const getWinner = (matrix) => {\n    let winner = e;\n    let rowCounts = [];\n    let colCounts = [];\n  \n    for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) \n    {\n\n      if (!(rowIndex in rowCounts))\n      {\n        rowCounts[rowIndex] = {x:0, o:0};\n      }\n\n      for (let colIndex = 0; colIndex < matrix[rowIndex].length; colIndex++)\n      {      \n        let value = matrix[rowIndex][colIndex];\n\n        if (value !== e)\n        { \n          incrementCount(rowCounts[rowIndex], value);\n  \n          if (! (colIndex in colCounts))\n          {\n            colCounts[colIndex] = {x:0, o:0};\n          }\n  \n          incrementCount(colCounts[colIndex], value);\n\n          //console.log(`rowCounts`, rowCounts);\n          //console.log(`colCounts`, colCounts);\n\n        }\n      }\n    }\n  \n    winner = getWinningRowCol(rowCounts);\n  \n    if (winner === e){\n      winner = getWinningRowCol(colCounts)};\n  \n    if (winner === e){\n      winner = getWinningDiag(matrix, false)};\n  \n    if (winner === e){\n      winner = getWinningDiag(matrix, true)};\n  \n    return winner;\n  };\n  \n  const getWinningRowCol = (rcCounts) => {\n    let winner = e;\n  \n    for (let rcIndex in rcCounts)\n    {\n      if (rcCounts[rcIndex].x === rcCounts.length)\n      {\n          winner = x;\n      }\n      else if (rcCounts[rcIndex].o === rcCounts.length) \n      {\n        winner = o;\n      }\n    }\n\n    console.log('getWinningRowCol = ', winner);\n  \n    return winner;\n  };\n  \n  const getWinningDiag = (matrix, revDiag=false) => {\n  \n    let winner = '';\n    const counts = { x:0, o:0 };\n    const n = matrix.length;\n  \n    for (let index = 0; index < n; index++)\n    {\n  \n      let value = null;\n      if (revDiag === true)\n      {\n        value = matrix[index][n - index - 1];\n      }\n      else\n      {\n        value = matrix[index][index];\n      }\n\n      incrementCount(counts, value);   \n    }\n  \n    if (counts.x === n)\n    {\n       winner = x;\n    }\n    else if (counts.o === n)\n    {\n       winner = o;\n    }\n  \n    return winner;\n  };\n\n  const incrementCount = (counts, entry) =>\n  {\n      // console.log('incrementCount: value', entry);\n\n      if (entry.value === x)\n      {\n        counts.x +=1\n      }\n      else if (entry.value === o)\n      {\n        counts.o +=1\n      }\n  };\n\n  export default TicTacToeComputeWinner;","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport TicTacToeComputeWinner from './TicTacToeComputeWinner';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with empty value and unique ids.\n  //initialize the state for squares, players and winner and message\n  const [squares, setSquares] = useState(generateSquares());\n  const [player, setPlayer] = useState(PLAYER_1);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [winner, setWinner] = useState('');\n\n  // Wave 2\n  // You will need to create a method to change the square When it is clicked on.\n  // Then pass it into the squares as a callback\n  const onClickCallback = (id, e) => {\n    //console.log('square button pressed: ', id);\n    if (winner !== '')\n    {\n      return;\n    }\n\n    const rowNum = Math.floor(id / squares.length);\n    const colNum = id % squares.length;\n\n    //console.log('Sq value:', squares[rowNum][colNum]);\n    // check if square is already filled with an x or o, if so dont change its value\n    const currentSquare = squares[rowNum][colNum]; \n    if (currentSquare.value === PLAYER_1 || currentSquare.value === PLAYER_2)\n    {\n      return;\n    }\n\n    //console.log('row_num', rowNum);\n    //console.log('col_num', colNum);\n\n    // set the value of the square on square button click\n    squares[rowNum][colNum] = {id:id, value:player};\n\n    let nextPlayer = '';\n    // toggle player\n    if (player === PLAYER_1){\n      nextPlayer = PLAYER_2;\n    }\n    else {\n      nextPlayer = PLAYER_1;\n    }\n\n    setPlayer(nextPlayer);\n\n    setStatusMessage(`Current Player ${nextPlayer}`);\n\n    const computedWinner = checkForWinner();\n    //console.log('computed winner:', computedWinner);\n\n    if (computedWinner === PLAYER_1 || computedWinner === PLAYER_2){\n      setWinner(computedWinner);\n      setStatusMessage(`Winner is ${computedWinner}`);\n    }\n  };\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    return TicTacToeComputeWinner(squares);\n\n  }\n\n  const resetGame = () => {\n      setSquares(generateSquares());\n      const initialPlayer = PLAYER_1; // I decided initial player is 1\n      setPlayer(initialPlayer);\n      setWinner('');\n      setStatusMessage(`Current player ${initialPlayer}`);\n    };\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{statusMessage}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} />\n      </main>\n    </div>\n  );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}